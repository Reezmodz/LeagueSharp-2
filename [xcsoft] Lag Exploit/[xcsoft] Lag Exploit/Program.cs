using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LeagueSharp;
using LeagueSharp.Common;
using SharpDX;
using SharpDX.Direct3D9;
using Color = System.Drawing.Color;

namespace _xcsoft__Lag_Exploit
{
    internal class Program
    {
        static Obj_AI_Hero Player { get { return ObjectManager.Player; } }
        static Menu Menu;
        static int Traffic;
        static InventorySlot ward;
        static readonly Vector3 SummonersRift_PurpleFountain = new Vector3(14400f, 14376f, 171.9777f);
        static readonly Vector3 SummonersRift_BlueFountain = new Vector3(420f, 422f, 183.5748f);

        static void Main(string[] args)
        {
            CustomEvents.Game.OnGameLoad += Game_OnGameLoad;
            
        }

        static void Game_OnGameLoad(EventArgs args)
        {
            Menu = new Menu("[xcsoft] Lag Exploit", "xcsoft_LagExploit", true);

            Menu.AddItem(new MenuItem("switch", "Switch").SetValue(false));

            Menu.AddToMainMenu();

            Game.OnGameUpdate += Game_OnGameUpdate;
            Drawing.OnDraw += Drawing_OnDraw;
        }

        static void Game_OnGameUpdate(EventArgs args)
        {
            if (!Menu.Item("switch").GetValue<Boolean>() || Player.IsDead)
                return;

            PacketFlood();
        }

        static void Drawing_OnDraw(EventArgs args)
        {
            if (!Menu.Item("switch").GetValue<Boolean>() || Player.IsDead)
                return;

            var targetpos = Drawing.WorldToScreen(Player.Position);

             if (ward == null || !ward.SpellSlot.IsReady())
             {
                 Drawing.DrawText(targetpos[0] - 10, targetpos[1], Color.Red, "Please Buy The Ward");
                 return;
             }

             Drawing.DrawText(targetpos[0] - 10, targetpos[1], Color.Red, "Sent Packets: " + Traffic);
        }

        static void PacketFlood()
        {
            ward = Items.GetWardSlot();
            
            if (ward == null || !ward.SpellSlot.IsReady())
                return;

            Random rnd = new Random();

            for (int i = 1; i <= 20; i++)
            {
                var vec = new Vector3(rnd.Next(0, 20000), rnd.Next(0, 20000), 100);

                if (Player.ServerPosition.Distance(vec, false) > 5000 && !vec.UnderTurret(true))
                {
                    Player.Spellbook.CastSpell(ward.SpellSlot, vec);

                    Player.IssueOrder(GameObjectOrder.HoldPosition, Vector3.Zero);

                    Traffic++;
                }
            }
        }
    }
}
